import { sticker } from "../../lib/sticker.js";
import uploadFile from "../../lib/uploadFile.js";
import uploadImage from "../../lib/uploadImage.js";
import { webp2png } from "../../lib/webp2mp4.js";

let handler = async (m, { conn, args: args, usedPrefix, command }) => {
  console.log(args);                
  let stiker = false;
  try {
    let q = m.quoted ? m.quoted : m;
    let mime = (q.msg || q).mimetype || q.mediaType || "";
    if (/webp|image|video/g.test(mime)) {
      if (/video/g.test(mime))
        if ((q.msg || q).seconds > 11) return m.reply("Maksimal 10 detik!");
      let img = await q.download?.();
      if (!img)
        throw `balas gambar/video/stiker dengan perintah ${
          usedPrefix + command
        }`;
      let out;
      try {
        if (/webp/g.test(mime)) out = await webp2png(img);
        else if (/image/g.test(mime)) out = await uploadImage(img);
        else if (/video/g.test(mime)) out = await uploadFile(img);
        if (typeof out !== "string") out = await uploadImage(img);
        stiker = await sticker(
          false,
          out,
          global.stickpack,
          global.stickauth,
          [""],
          args[0] ? args.slice(0).join(" ") : false
        );
      } catch (e) {
        console.error(e);
      } finally {
        if (!stiker)
          stiker = await sticker(
            img,
            false,
            global.stickpack,
            global.stickauth,
            [""],
            args[0] ? args[0] : false,
          );
      }
    } else if (args[1]) {
      if (isUrl(args[1]))
        stiker = await sticker(
          false,
          args[1],
          global.stickpack,
          global.stickauth,
          [""],
          args[0] ? args[0] : false
        );
      else return m.reply("URL tidak valid!");
    }
  } catch (e) {
    console.error(e);
    if (!stiker) stiker = e;
  } finally {
    if (stiker) conn.sendFile(m.chat, stiker, "sticker.webp", "", m);
    else throw "Conversion failed";
  }
};
handler.help = [
  "stiker-exif (caption|reply media) { objt }",
  "stiker-exif <url> { objt }"
];
handler.tags = ["sticker"];
handler.command = /^sticker-exif?$/i;

export default handler;

const isUrl = (text) => {
  return text.match(
    new RegExp(
      /https?:\/\/(www\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)(jpe?g|gif|png)/,
      "gi"
    )
  );
};